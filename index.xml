<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>blog.nerd.rocks</title><link>https://blog.nerd.rocks/</link><description>Recent content on blog.nerd.rocks</description><generator>Hugo -- 0.119.0</generator><language>en-us</language><lastBuildDate>Fri, 10 May 2024 07:19:02 +0200</lastBuildDate><atom:link href="https://blog.nerd.rocks/index.xml" rel="self" type="application/rss+xml"/><item><title>Common snippets for developing Zellij plugins</title><link>https://blog.nerd.rocks/posts/common-snippets-for-zellij-development/</link><pubDate>Fri, 10 May 2024 07:19:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/common-snippets-for-zellij-development/</guid><description>This page describes some common tasks and snippets that can be used for the plugin development. Snippets are written in Rust, but the concepts should be transferable to other languages as well. All examples are based on the rust-plugin-example.
Non selectable plugins with permissions If a plugin (like a statusbar) should be non selectable, zellij-tile provides the function set_selectable(). When this function is directly called on plugin initialization, a user won&amp;rsquo;t be able to grant plugin permissions since the plugin cannot be selected.</description></item><item><title>Getting started with developing Zellij plugins</title><link>https://blog.nerd.rocks/posts/getting-started-with-zellij-plugins/</link><pubDate>Fri, 10 May 2024 07:15:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/getting-started-with-zellij-plugins/</guid><description>This guide will help you get started with developing a plugin for Zellij in Rust. It will guide you through setting up your development environment, creating a new plugin, and playing around to understand how Zellij plugins work.
Requirements Make sure you have the following programs installed on your system:
Rust with the wasm32-wasi target or rustup Zellij If you have installed rustup, you can install the wasm32-wasi target by running:</description></item><item><title>Learnings from developing a zellij plugin</title><link>https://blog.nerd.rocks/posts/profiling-zellij-plugins/</link><pubDate>Mon, 01 Jan 2024 12:05:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/profiling-zellij-plugins/</guid><description>Zellij is a terminal multiplexer written in Rust, that aims to provide an intuitive and easy to extend working environment. With version 0.37.0 Zellij introduced a plugin system, that allows users to write plugins with WebAssembly. Additionally the plugin system provides a rust crate with an API to interact with the Zellij core.
Since zellij to the date of writing this article has not provided customizations for the status bar, I decided to write one that is easily customizable by writing KDL configuration into layout files - zjstatus.</description></item><item><title>State of SameSite cookies in Firefox and Chromium</title><link>https://blog.nerd.rocks/posts/state-of-samesite-in-firefox-and-chrome/</link><pubDate>Sun, 12 Mar 2023 20:29:02 +0100</pubDate><guid>https://blog.nerd.rocks/posts/state-of-samesite-in-firefox-and-chrome/</guid><description>SameSite cookies are commonly used to harden websites against CSRF attacks. These attacks can be mitigated in certain scenarios with SameSite cookies, since a cookie with the SameSite attribute set to strict should not be send to the destination site, if the request passed a foreign site. However, handling of the SameSite attribute differs between Firefox and Chromium.
What is the SameSite attribute in theory? The SameSite attribute was specified in the RFC draft rfc6265bis.</description></item><item><title>Debugging another SIGABRT in neovim</title><link>https://blog.nerd.rocks/posts/debugging-another-sigabrt-in-neovim/</link><pubDate>Sun, 22 May 2022 12:05:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/debugging-another-sigabrt-in-neovim/</guid><description>In the last blog article I described a way how to debug SIGABRT crashes in neovim with the help of a nix shell. It helped me to find out the cause of the crashes in neovim 0.5.0 and an already existing issue in the github project, which already provided a solution. Unfortunately, since a few weeks, I experience crashes in neovim again. Most of the time when using telescope with the preview, neovim randomly crashes.</description></item><item><title>Debugging neovim with nix shell</title><link>https://blog.nerd.rocks/posts/debugging-with-nix-shell/</link><pubDate>Sat, 09 Oct 2021 12:05:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/debugging-with-nix-shell/</guid><description>Since the introduction of the new lua api in neovim 0.5.0 there are plenty new vim plugins based on this api. While testing some of the new plugins, my neovim exited with a SIGSEGV and sometime with a SIGABRT in specific workflows. As these crashes are reproducible, it should be easy to debug the problem. However, we need a debug build of neovim and, since I&amp;rsquo;m using macOS, the stack trace of neovim.</description></item></channel></rss>