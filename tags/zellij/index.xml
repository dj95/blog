<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>zellij on blog.nerd.rocks</title><link>https://blog.nerd.rocks/tags/zellij/</link><description>Recent content in zellij on blog.nerd.rocks</description><generator>Hugo -- 0.119.0</generator><language>en-us</language><lastBuildDate>Fri, 10 May 2024 07:19:02 +0200</lastBuildDate><atom:link href="https://blog.nerd.rocks/tags/zellij/index.xml" rel="self" type="application/rss+xml"/><item><title>Common snippets for developing Zellij plugins</title><link>https://blog.nerd.rocks/posts/common-snippets-for-zellij-development/</link><pubDate>Fri, 10 May 2024 07:19:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/common-snippets-for-zellij-development/</guid><description>This page describes some common tasks and snippets that can be used for the plugin development. Snippets are written in Rust, but the concepts should be transferable to other languages as well. All examples are based on the rust-plugin-example.
Non selectable plugins with permissions If a plugin (like a statusbar) should be non selectable, zellij-tile provides the function set_selectable(). When this function is directly called on plugin initialization, a user won&amp;rsquo;t be able to grant plugin permissions since the plugin cannot be selected.</description></item><item><title>Getting started with developing Zellij plugins</title><link>https://blog.nerd.rocks/posts/getting-started-with-zellij-plugins/</link><pubDate>Fri, 10 May 2024 07:15:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/getting-started-with-zellij-plugins/</guid><description>This guide will help you get started with developing a plugin for Zellij in Rust. It will guide you through setting up your development environment, creating a new plugin, and playing around to understand how Zellij plugins work.
Requirements Make sure you have the following programs installed on your system:
Rust with the wasm32-wasi target or rustup Zellij If you have installed rustup, you can install the wasm32-wasi target by running:</description></item><item><title>Learnings from developing a zellij plugin</title><link>https://blog.nerd.rocks/posts/profiling-zellij-plugins/</link><pubDate>Mon, 01 Jan 2024 12:05:02 +0200</pubDate><guid>https://blog.nerd.rocks/posts/profiling-zellij-plugins/</guid><description>Zellij is a terminal multiplexer written in Rust, that aims to provide an intuitive and easy to extend working environment. With version 0.37.0 Zellij introduced a plugin system, that allows users to write plugins with WebAssembly. Additionally the plugin system provides a rust crate with an API to interact with the Zellij core.
Since zellij to the date of writing this article has not provided customizations for the status bar, I decided to write one that is easily customizable by writing KDL configuration into layout files - zjstatus.</description></item></channel></rss>